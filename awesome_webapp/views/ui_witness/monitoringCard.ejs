<!DOCTYPE html>
<html lang="en">

<head>
  <%- include('../partials/head'); %>
</head>
<script src="https://cdnjs.cloudflare.com/ajax/libs/vue/2.3.4/vue.js"></script>
<script src="https://unpkg.com/vue-router@3"></script>
<script src="https://unpkg.com/axios/dist/axios.min.js"></script>

<body>

  <header>
    <%- include('partials_witness/header'); %>
  </header>

  <main id="main">
    <form @submit.prevent="registerWitness">
      <div class="container">
        <div class="card border-success mb-3">
          <div class="card-header">
            <h5 style="margin-top:10px;color:green;text-align:center;">
              {{slaID.serviceID}}: Report Monitoring Votes
              <div v-if="result.ended">
                (Inactive)
              </div>
            </h5>
          </div>
          <div class="card-body">
            <h6 class="card-subtitle mb-2 text-muted" style="color:green;">Commodity type: {{auctionObject.service.commodity.docType}}</h6>
            <h6 class="card-subtitle mb-2 text-muted" style="color:green;">Service Provider: {{auction.provider}}</h6>
            <h6 class="card-subtitle mb-2 text-muted" style="color:green;">Service Customer: {{auction.customer}}</h6>
            <h5 class="card-subtitle mb-2" style="color:green;">SLA deadline: {{getSLADeadline(auctionObject.service.witnessGlobalRules.slaDeadline)}}</h5>
            <h5 class="card-subtitle mb-2" style="color:green;">Time left: {{timerCount}}</h5>
            <div class="properties">
              <h5 style="color: green;">Service Properties</h5>
              <ul class="list-group list-group-flush" style="margin-top: 10px;">
                <div v-for="property in auctionObject.service.commodity.properties">
                  <li class="list-group-item"><b>{{property.commodityKey}}: </b>{{property.commodityValue}}</li>
                </div>
              </ul>
            </div>
            <div class="slaRules">
              <h5 style="color: green;">Report your votes for each SLO</h5>
              <div v-for="(rule,index) in auctionObject.service.sloRulesAndFines">
                <button type="button" class="btn btn-success" v-on:click="showRule(index)" style="margin-top:10px; margin-bottom:10px;">SLO {{index+1}}</button>
                <div v-if="auctionObject.service.sloRulesAndFines[index].showSLARule">
                  <b>Definition</b><br>
                  <li class="list-group-item">Title: {{rule.ruleIdentifier}}</li>
                  <li class="list-group-item">Condition: {{rule.ruleCondition}}</li>
                  <li class="list-group-item">Violation fine amount: {{rule.ruleFine}} {{getCurrency(rule.currency)}}</li>
                  <hr style="color:green; border: 1px solid">
                  <b>Witness monitoring rules</b><br>
                  <div class="row">
                    <div class="col">
                      <label for="rewardsAndPunishmentsTable" style="margin-top:10px">Time period to react to violations:</label>
                    </div>
                    <div class="col">
                      <table class="table table-bordered table-sm" id="tPeriod">
                        <tbody>
                          <tr>
                            <td scope="row">{{rule.sloWitnessConfig.tPeriod.hours}} hours</td>
                            <td>{{rule.sloWitnessConfig.tPeriod.minutes}} minutes</td>
                            <td>{{rule.sloWitnessConfig.tPeriod.seconds}} seconds</td>
                          </tr>
                        </tbody>
                      </table>
                    </div>
                  </div>
                  <label for="rewardsAndPunishmentsTable">Rewards and punishments for correct and incorrect violation votes:</label>
                  <table class="table table-bordered table-sm" id="rewardsAndPunishmentsTable">
                    <tbody>
                      <tr>
                        <td scope="row"></td>
                        <td>Violation</td>
                        <td>No Violation</td>
                      </tr>
                      <tr>
                        <td scope="row">Reward</td>
                        <td>{{rule.sloWitnessConfig.rewardViolation}} {{getCurrency(rule.currency)}}</td>
                        <td>{{rule.sloWitnessConfig.rewardNoViolation}} {{getCurrency(rule.currency)}}</td>
                      </tr>
                      <tr>
                        <td scope="row">Punishment</td>
                        <td>{{rule.sloWitnessConfig.punishmentViolation}} {{getCurrency(rule.currency)}}</td>
                        <td>{{rule.sloWitnessConfig.punishmentNoViolation}} {{getCurrency(rule.currency)}}</td>
                      </tr>
                    </tbody>
                  </table>
                  <div class="row">
                    <div class="col">
                      <div v-if="!result.ended">
                        <div v-if="rule.showSLARuleButton">
                          <button type="button" class="btn btn-warning" :name="index" v-bind:id="index+1" v-on:click="submitVote(index)" style="display: block;margin-left: auto;margin-right: auto;justify-content: center;">
                            Submit SLO {{index +1}} violation vote</button>
                        </div>
                        <div v-else>
                          <h5>Vote submitted!</h5>
                        </div>
                      </div>
                      <div v-else>
                        <h5>SLA has ended</h5>
                      </div>
                    </div>
                  </div>
                </div><br>
              </div>
              <!--<button type="button" class="btn btn-success" v-on:click="showMe" style="margin-top:10px; margin-bottom:10px;">SLA rules</button>-->
              <!--<div v-if="showSLA">
            </div>-->
            </div>
          </div>
        </div>
      </div>
    </form>
  </main>

  <footer>
    <%- include('../partials/footer'); %>
  </footer>

  <script type="text/javascript">
    var router = new VueRouter({
      mode: 'history',
      routes: []
    });
    window.app = new Vue({
      router,
      el: '#main',
      data() {
        return {
          timerCount: '',
          monitoringObject: {
            sla: '',
            slo: ''
          },
          slaID: '',
          result: {
            ended: '',
            witnesses: []
          },
          auction: {},
          biggestBid: {
            pricing: {
              bidAmount: '',
              pricingCurrency: '',
              pricingSubscription: ''
            }
          },
          auctionID: '',
          bids: [],
          //showSLA: false,
          auctionObject: {
            service: {
              commodity: {},
              pricing: {
                pricingCurrency: '',
                pricingSubscription: ''
              },
              sloRulesAndFines: [],
              witnessGlobalRules: {
                witnessGamePeriod: {},
                slaDeadline: ''
              }
            },
            auctionRules: {
              pricing: {}
            }
          },
          bidsSafe: [],
          auctionSafe: {
            pricing: {},
            service: {}
          },
          winningBid: ''
        }
      },
      watch: {
        timerCount: {
          handler(value) {
            if (value != "SLA is finished") {
              setTimeout(() => {
                this.getTimeLeft();
                //this.timerCount--;
              }, 1000);
            }
          },
          immediate: true // This ensures the watcher is triggered upon creation
        }
      },
      methods: {
        checkVotes() {
          const userID = sessionStorage.getItem("userID");
          for (var i = 0; i < this.auctionObject.service.sloRulesAndFines.length; i++) {
            var sloVotingBuckets = this.auctionObject.service.sloRulesAndFines[i].sloVotingBuckets;
            sloVotes = sloVotingBuckets[sloVotingBuckets.length - 1];
            var now = new Date();
            var sloDeadline = new Date(this.auctionObject.service.sloRulesAndFines[i].sloDeadline);
            var sloTimeLeft = sloDeadline - now;
            for (var j = 0; j < sloVotes.length; j++) {
              var vote = sloVotes[j];
              if (vote == userID && sloTimeLeft > 0) {
                this.sloVoted(i);
              }
            }
          }
        },
        getTimeLeft() {
          var now = new Date();
          var countDownDate = new Date(Date.parse(this.auctionObject.service.witnessGlobalRules.slaDeadline));
          var distance = countDownDate - now;
          if (distance < 0) {
            this.timerCount = "SLA is finished";
          } else {
            var days = Math.floor(distance / (1000 * 60 * 60 * 24));
            var hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
            var minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
            var seconds = Math.floor((distance % (1000 * 60)) / 1000);
            var string = days + "d " + hours + "h " + minutes + "m " + seconds + "s ";
            //console.log(string);
            this.timerCount = string;
          }
        },
        getSLADeadline(d) {
          var now = new Date();
          //console.log("now: " + now);
          var date = new Date(Date.parse(d));
          //console.log(date.toLocaleString());
          return date.toLocaleString(); //where are the seconds?!?
        },
        async parser(result) {
          //console.log(result);
          //console.log(this.auctionID);
          console.log(result);
          this.auction = result;
          this.auctionObject = this.auction.auctionObject;
          console.log(this.auctionObject);
          this.biggestBid = this.auction.biggestBid;
          for (var i = 0; i < this.auctionObject.service.sloRulesAndFines.length; i++) {
            Vue.set(this.auctionObject.service.sloRulesAndFines[i], 'showSLARule', true);
            Vue.set(this.auctionObject.service.sloRulesAndFines[i], 'showSLARuleButton', true);
          }
          this.checkVotes();
        },
        submitVote(index) {
          if (confirm("Do you really want to submit this vote?")) {
            const self = this;
            console.log(index.toString());
            console.log(this.serviceID.serviceID.toString());
            const token = sessionStorage.getItem("JWT");
            console.log(token);
            config = {
              headers: {
                Authorization: `Bearer ${token}`
              }
            };
            console.log(JSON.stringify(this.bid));
            let body = {
              "fcn": "submitWitnessVote",
              "args": [this.serviceID.serviceID, JSON.stringify(index)]
            }
            console.log(JSON.stringify(this.serviceID.serviceID));
            axios.post('http://127.0.0.1:8080/api/invoke',
                body,
                config)
              .then(function(response) {
                console.log(response);
                if (response.data.result.message == "Successfully submitted vote") {
                  //  window.location = "/ui_witness/postAuctionThankYou"
                  self.sloVoted(index);
                } else if (response.data.error == "TransactionError") {
                  this.resubmitVote(index)
                  //alert(response.data.result);
                  //window.location = "/ui_provider/postAuctionThankYou"
                } else {

                }
                //a catch or something was here
              })
              .catch(function(error) {
                self.resubmitVote(index);
                //alert(error)
                //window.location = "/ui_provider/postAuctionThankYou"
              })
          }
        },
        resubmitVote(index) {
          console.log("resubmitting vote");
          const self = this;
          console.log(index.toString());
          console.log(this.serviceID.serviceID.toString());
          const token = sessionStorage.getItem("JWT");
          console.log(token);
          config = {
            headers: {
              Authorization: `Bearer ${token}`
            }
          };
          console.log(JSON.stringify(this.bid));
          let body = {
            "fcn": "submitWitnessVote",
            "args": [this.serviceID.serviceID, JSON.stringify(index)]
          }
          console.log(JSON.stringify(this.serviceID.serviceID));
          axios.post('http://127.0.0.1:8080/api/invoke',
              body,
              config)
            .then(function(response) {
              console.log(response);
              if (response.data.result.message == "Successfully submitted vote") {
                //  window.location = "/ui_witness/postAuctionThankYou"
                self.sloVoted(index);
              } else if (response.data.result.error == "TransactionError") {
                this.resubmitVote(index)
                //alert(response.data.result);
                //window.location = "/ui_provider/postAuctionThankYou"
              } else {

              }
              //a catch or something was here
            })
            .catch(function(error) {
                self.resubmitVote(index)
              //window.location = "/ui_provider/postAuctionThankYou"
            })
        },
        sloVoted(index) {
          if (this.auctionObject.service.sloRulesAndFines[index].showSLARuleButton == true) {
            this.auctionObject.service.sloRulesAndFines[index].showSLARuleButton = false;
          }
        },
        showRule(index) {
          if (this.auctionObject.service.sloRulesAndFines[index].showSLARule == true) {
            this.auctionObject.service.sloRulesAndFines[index].showSLARule = false;
          } else {
            this.auctionObject.service.sloRulesAndFines[index].showSLARule = true;
          }
          /*if (this.showSLA == true) {
            this.showSLA = false;
          } else {
            this.showSLA = true;
          }*/
          /*console.log(rule.ruleCondition);
          console.log(rule.showSLARule);
          if (rule.showSLARule == true) {
            rule.showSLARule = false;
          } else {
            rule.showSLARule = true;
          }*/
          //this.showMe();
        },
        /*showMe() {
          this.showSLA = true;
          if (this.showSLA == true) {
            this.showSLA = false;
          } else {
            this.showSLA = true;
          }
        },*/
        getCurrency(currency) {
          return "zCoins";
        },
        getSubscription(subscription) {
          if (subscription == "flatFee") {
            return "Flat fee";
          } else if (subscription == "perHour") {
            return "Per Hour";
          } else if (subscription == "perMonth") {
            return "Per Month";
          } else if (subscription == "perYear") {
            return "Per Year";
          } else {
            return "Flat Fee";
          }
        },
        async created2() {
          const token = sessionStorage.getItem("JWT");
          if (token == null) {
            window.location = "/"
          }
          console.log(token);
          config = {
            headers: {
              Authorization: `Bearer ${token}`
            }
          };
          q = this.$route.query;
          console.log(q);
          console.log(q.serviceID);
          this.serviceID = q;
          console.log(JSON.stringify(this.serviceID.serviceID));
          let url = "http://127.0.0.1:8080/api/query?args=[" + JSON.stringify(this.serviceID.serviceID) + "]&fcn=queryService";
          console.log(url);
          const res = await axios.get(url, config);
          if (res.data.error != null) {
            //console.log(res.data.result);
            alert(res.data.error);
          } else {
            this.slaID = q;
            console.log(res);
            this.result = res.data.result;
            console.log(this.result);
            this.parser(this.result);
          }
        }
      },
      async created() {
        this.created2();
      }
    });
  </script>

</body>

</html>
