<!DOCTYPE html>
<html lang="en">

<head>
  <%- include('../partials/head'); %>
</head>
<script src="https://cdnjs.cloudflare.com/ajax/libs/vue/2.3.4/vue.js"></script>
<script src="https://unpkg.com/vue-router@3"></script>
<script src="https://unpkg.com/axios/dist/axios.min.js"></script>

<body>

  <header>
    <%- include('partials_provider/header'); %>
  </header>

  <main id="main">
    <div class="container">
      <div class="card border-success mb-3">
        <div class="card-header">
          <h5 style="margin-top:10px;color:green;text-align:center;">
            {{slaID.serviceID}}
          </h5>
        </div>
        <div class="card-body">
          <div v-if="auctionObject.auctionRules.auctionType === 'english'">
            <h5 class="card-title" style="color:green;">English Auction</h5>
          </div>
          <div v-else-if="auctionObject.auctionRules.auctionType === 'dutch'">
            <h5 class="card-title" style="color:orange;">Dutch Auction</h5>
          </div>
          <div v-else-if="auctionObject.auctionRules.auctionType === 'fpsb'">
            <h5 class="card-title" style="color:green;">First Priced Sealed Bid Auction</h5>
          </div>
          <div v-else-if="auctionObject.auctionRules.auctionType === 'spsb'">
            <h5 class="card-title" style="color:green;">Second Priced Sealed Bid Auction</h5>
          </div>
          <h6 class="card-subtitle mb-2 text-muted" style="color:green;">Commodity type: {{auctionObject.service.commodity.docType}}</h6>
          <h6 class="card-subtitle mb-2 text-muted" style="color:green;">Service Provider: {{auction.provider}}</h6>
          <h6 class="card-subtitle mb-2 text-muted" style="color:green;">Service Customer: {{auction.customer}}</h6>
          <h5 class="card-subtitle mb-2" style="color:green;">SLA deadline: {{getSLADeadline(auctionObject.service.witnessGlobalRules.slaDeadline)}}</h5>
          <h5 class="card-subtitle mb-2" style="color:green;">Time left: {{timerCount}}</h5>
          <div class="properties">
            <h5 style="color: green;">Service Properties</h5>
            <ul class="list-group list-group-flush" style="margin-top: 10px;">
              <div v-for="property in auctionObject.service.commodity.properties">
                <li class="list-group-item"><b>{{property.commodityKey}}: </b>{{property.commodityValue}}</li>
              </div>
            </ul>
          </div>
          <div class="slaRules">
            <h5 style="color: green;">SLA rules</h5>
            <div v-for="(rule,index) in auctionObject.service.sloRulesAndFines">
              <button type="button" class="btn btn-success" v-on:click="showRule(index)" style="margin-top:10px; margin-bottom:10px;">SLO {{index+1}}</button>
              <div v-if="auctionObject.service.sloRulesAndFines[index].showSLARule">
                <li class="list-group-item"><b>SLO {{index+1}}:</b></li>
                <li class="list-group-item">Title: {{rule.ruleIdentifier}}</li>
                <li class="list-group-item">Condition: {{rule.ruleCondition}}</li>
                <li class="list-group-item">Violation fine amount: {{rule.ruleFine}} {{getCurrency(rule.currency)}}</li>
              </div>
            </div>
            <!--<button type="button" class="btn btn-success" v-on:click="showMe" style="margin-top:10px; margin-bottom:10px;">SLA rules</button>-->
            <!--<div v-if="showSLA">
            </div>-->
          </div>
          <div class="pricing" style="margin-top:10px;">
            <h5 style="color: green;">Pricing</h5>
            <ul class="list-group list-group-flush" style="margin-top: 10px;">
              <li class="list-group-item"><b>Service fee:</b> {{biggestBid.pricing.bidAmount}} {{getCurrency(biggestBid.pricing.pricingCurrency)}} </li>
              <li class="list-group-item"><b>Subscription:</b> {{getSubscription(biggestBid.pricing.pricingSubscription)}} </li>
            </ul>
          </div>
        </div>
      </div>
      <div v-if="auction.ended === false">
        <div class="card border-success mb-3">
          <button name="submit" type="submit" class="btn btn-success" v-on:click="endSLA()" style="justify-content:center;margin-left:auto;
               margin-right:auto; margin-top: 10px; margin-bottom: 10px;">
            End SLA
          </button>
        </div>
      </div>
    </div>
  </main>

  <footer>
    <%- include('../partials/footer'); %>
  </footer>

  <script type="text/javascript">
    var router = new VueRouter({
      mode: 'history',
      routes: []
    });
    window.app = new Vue({
      router,
      el: '#main',
      data() {
        return {
          timerCount: '',
          slaID: '',
          result: {},
          auction: {},
          biggestBid: {
            pricing: {
              bidAmount: '',
              pricingCurrency: '',
              pricingSubscription: ''
            }
          },
          auctionID: '',
          bids: [],
          //showSLA: false,
          auctionObject: {
            service: {
              commodity: {},
              pricing: {
                pricingCurrency: '',
                pricingSubscription: ''
              },
              witnessGlobalRules: {
                slaDeadline: ''
              },
              sloRulesAndFines: []
            },
            auctionRules: {
              pricing: {}
            }
          },
          bidsSafe: [],
          auctionSafe: {
            pricing: {},
            service: {}
          },
          winningBid: ''
        }
      },
      watch: {
        timerCount: {
          handler(value) {
            if (value != "SLA is finished") {
              setTimeout(() => {
                console.log("step");
                this.getTimeLeft();
                //this.timerCount--;
              }, 1000);
            }
          },
          immediate: true // This ensures the watcher is triggered upon creation
        }
      },
      methods: {
        getTimeLeft() {
          var now = new Date();
          var countDownDate = new Date(Date.parse(this.auctionObject.service.witnessGlobalRules.slaDeadline));
          var distance = countDownDate - now;
          if (distance < 0) {
            this.timerCount = "SLA is finished";
          } else {
            var days = Math.floor(distance / (1000 * 60 * 60 * 24));
            var hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
            var minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
            var seconds = Math.floor((distance % (1000 * 60)) / 1000);
            var string = days + "d " + hours + "h " + minutes + "m " + seconds + "s ";
            //console.log(string);
            this.timerCount = string;
          }
        },
        async parser(result) {
          //console.log(result);
          //console.log(this.auctionID);
          console.log(result);
          this.auction = result;
          this.auctionObject = this.auction.auctionObject;
          console.log(this.auctionObject);
          this.biggestBid = this.auction.biggestBid;
          for (var i = 0; i < this.auctionObject.service.sloRulesAndFines.length; i++) {
            Vue.set(this.auctionObject.service.sloRulesAndFines[i], 'showSLARule', false);
          }
        },
        getSLADeadline(d) {
          var now = new Date();
          console.log("now: "+now);
          var date = new Date(Date.parse(d));
          console.log(date.toLocaleString());
          return date.toLocaleString(); //where are the seconds?!?
        },
        endSLA() {
          if (confirm("Do you really want to end this SLA?")) {
            const self = this;
            //console.log(index.toString());
            console.log(this.serviceID.serviceID.toString());
            const token = sessionStorage.getItem("JWT");
            console.log(token);
            config = {
              headers: {
                Authorization: `Bearer ${token}`
              }
            };
            console.log(JSON.stringify(this.bid));
            let body = {
              "fcn": "endSLA",
              "args": [this.serviceID.serviceID]
            }
            console.log("here");
            console.log(JSON.stringify(this.serviceID.serviceID));
            axios.post('http://127.0.0.1:8080/api/invoke',
                body,
                config)
              .then(function(response) {
                console.log(response);
                if (response.data.result.message == "Successfully ended SLA and paid out users") {
                  window.location = "/ui_provider/postAuctionThankYou";
                } else if (response.data.result.message == "SLA already paid out") {
                  window.location = "/ui_provider/postAuctionThankYou";
                } else {
                  alert(response.data.result);
                  //window.location = "/ui_provider/postAuctionThankYou"
                }
                //a catch or something was here
              })
              .catch(function(error) {
                console.log(error);
                alert(error);
                //window.location = "/ui_provider/postAuctionThankYou"
              })
          }
        },
        showRule(index) {
          if (this.auctionObject.service.sloRulesAndFines[index].showSLARule == true) {
            this.auctionObject.service.sloRulesAndFines[index].showSLARule = false;
          } else {
            this.auctionObject.service.sloRulesAndFines[index].showSLARule = true;
          }
          /*if (this.showSLA == true) {
            this.showSLA = false;
          } else {
            this.showSLA = true;
          }*/
          /*console.log(rule.ruleCondition);
          console.log(rule.showSLARule);
          if (rule.showSLARule == true) {
            rule.showSLARule = false;
          } else {
            rule.showSLARule = true;
          }*/
          //this.showMe();
        },
        /*showMe() {
          this.showSLA = true;
          if (this.showSLA == true) {
            this.showSLA = false;
          } else {
            this.showSLA = true;
          }
        },*/
        getWinningBid(bids) {
          if (bids.length == 0) {
            return "No bids posted"
          }
          highest = 0;
          result = {};
          for (var i = 0; i < bids.length; i++) {
            bid = bids[i];
            if (parseInt(bid.pricing.bidAmount) > highest) {
              highest = bid.pricing.bidAmount;
              result = bid;
            }
          }
          bids.sort(function(a, b) {
            return parseFloat(b.pricing.bidAmount) - parseFloat(a.pricing.bidAmount);
          });
          if (this.auctionObject.auctionRules.auctionType == 'spsb' && bids.length > 1) {
            result.pricing.bidAmount = bids[1].pricing.bidAmount;
          }
          return result;
        },
        getCurrency(currency) {
          return "zCoins";
        },
        getSubscription(subscription) {
          if (subscription == "flatFee") {
            return "Flat fee";
          } else if (subscription == "perHour") {
            return "Per Hour";
          } else if (subscription == "perMonth") {
            return "Per Month";
          } else if (subscription == "perYear") {
            return "Per Year";
          } else {
            return "Flat Fee";
          }
        },
        async created2() {
          const token = sessionStorage.getItem("JWT");
          if (token == null) {
            window.location = "/"
          }
          console.log(token);
          config = {
            headers: {
              Authorization: `Bearer ${token}`
            }
          };
          q = this.$route.query;
          console.log(q);
          console.log(q.serviceID);
          this.serviceID = q;
          console.log(JSON.stringify(this.serviceID.serviceID));
          let url = "http://127.0.0.1:8080/api/query?args=[" + JSON.stringify(this.serviceID.serviceID) + "]&fcn=queryService";
          console.log(url);
          const res = await axios.get(url, config);
          if (res.data.error != null) {
            //console.log(res.data.result);
            alert(res.data.error);
          } else {
            this.slaID = q;
            console.log(res);
            this.result = res.data.result;
            console.log(this.result);
            this.parser(this.result);
          }
        }
      },
      async created() {
        this.created2();
      }
    });
  </script>

</body>

</html>
